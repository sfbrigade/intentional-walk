# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc "Push a new beta build to TestFlight"
  lane :beta do
    # get bundle version of app
    prev_version = get_info_plist_value(path: "./IntentionalWalkApp/Info.plist", key: "CFBundleVersion").to_i
    new_version = prev_version + 1

    # check if we're deploying a new version
    head_commit = `git rev-parse HEAD`
    prev_commit = `git rev-parse iOS-#{prev_version}`
    changelog = nil
    commit_after_upload = true
    if head_commit != prev_commit
      # increment build
      increment_build_number(xcodeproj: "IntentionalWalkApp.xcodeproj")
    else
      # adjust version numbers
      prev_version -= 1
      new_version -= 1
      commit_after_upload = false
    end
    # generate a changelog from previous version to head
    changelog = `git log --pretty=format:'%s' iOS-#{prev_version}..HEAD`
    changelog = changelog.gsub(/(Android|iOS) build \d+\n?/, '')
    changelog = "iOS build #{new_version}\n\n#{changelog}"
    puts "\n\n#{changelog}\n\n"
    build_app(
      workspace: "IntentionalWalkApp.xcworkspace",
      scheme: "IntentionalWalkApp",
      export_method: 'app-store',
      export_options: {
        provisioningProfiles: {
          "org.codeforsanfrancisco.intentionalwalk": "org.codeforsanfrancisco.intentionalwalk AppStore",
        }
      }
    )
    upload_to_testflight(changelog: changelog, skip_submission: true)
    # if successful, commit build version changes and tag
    if commit_after_upload
      `git add ../..`
      `git commit -m "iOS build #{new_version}"`
      `git tag iOS-#{new_version}`
      `git push`
      `git push --tag`
    end
  end
end
